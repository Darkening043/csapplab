#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	irmovq $7, %r9
	andq %rdx, %r9
	rrmovq %r9, %r11
	je continue
	mrmovq (%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle next1
	iaddq $1, %rax
next1:
	iaddq $-1, %r9
	je continue
	mrmovq 8(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	jle next2
	iaddq $1, %rax
next2:
	iaddq $-1, %r9
	je continue
	mrmovq 16(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle next3
	iaddq $1, %rax
next3:
	iaddq $-1, %r9
	je continue
	mrmovq 24(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle next4
	iaddq $1, %rax
next4:
	iaddq $-1, %r9
	je continue
	mrmovq 32(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jle next5
	iaddq $1, %rax
next5:
	iaddq $-1, %r9
	je continue
	mrmovq 40(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	jle next6
	iaddq $1, %rax
next6:
	iaddq $-1, %r9
	je continue
	mrmovq 48(%rdi), %r10
	iaddq $8, %rcx
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle continue
	iaddq $1, %rax

continue:
	subq %r11, %rdx	
	addq %rcx, %rdi
	addq %rcx, %rsi
Loop:	
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Next1		# if so, goto Npos:
	iaddq $1, %rax
Next1:
	andq %r9, %r9
	jle Next2
	iaddq $1, %rax
Next2:
	andq %r10, %r10
	jle Next3
	iaddq $1, %rax
Next3:
	andq %r11, %r11
	jle Next4
	iaddq $1, %rax
Next4:
	andq %r12, %r12
	jle Next5
	iaddq $1, %rax
Next5:
	andq %r13, %r13
	jle Next6
	iaddq $1, %rax
Next6:
	andq %r14, %r14
	jle Next7
	iaddq $1, %rax
Next7:
	andq %rcx, %rcx
	jle Npos
	iaddq $1, %rax
Npos:	
	iaddq $-8, %rdx		# len--
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
	jmp Loop		# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
