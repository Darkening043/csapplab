                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 30f10700000000000000 | 	irmovq $7, %rcx
0x03c: 30f3f8ffffffffffffff | 	irmovq $0xfffffffffffffff8, %rbx
0x046: 6221                 | 	andq %rdx, %rcx
0x048: 6223                 | 	andq %rdx, %rbx
0x04a: 71c401000000000000   | 	jle mod
0x053:                      | Loop:	
0x053: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x05d: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x067: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x071: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x07b: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x085: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x08f: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x099: 50573800000000000000 | 	mrmovq 56(%rdi), %rbp
0x0a3: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x0ad: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0b7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c1: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0cb: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x0d5: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x0df: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x0e9: 40563800000000000000 | 	rmmovq %rbp, 56(%rsi)
0x0f3: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0f5: 710801000000000000   | 	jle Next1		# if so, goto Npos:
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
0x108:                      | Next1:
0x108: 6299                 | 	andq %r9, %r9
0x10a: 711d01000000000000   | 	jle Next2
0x113: c0f00100000000000000 | 	iaddq $1, %rax
0x11d:                      | Next2:
0x11d: 62aa                 | 	andq %r10, %r10
0x11f: 713201000000000000   | 	jle Next3
0x128: c0f00100000000000000 | 	iaddq $1, %rax
0x132:                      | Next3:
0x132: 62bb                 | 	andq %r11, %r11
0x134: 714701000000000000   | 	jle Next4
0x13d: c0f00100000000000000 | 	iaddq $1, %rax
0x147:                      | Next4:
0x147: 62cc                 | 	andq %r12, %r12
0x149: 715c01000000000000   | 	jle Next5
0x152: c0f00100000000000000 | 	iaddq $1, %rax
0x15c:                      | Next5:
0x15c: 62dd                 | 	andq %r13, %r13
0x15e: 717101000000000000   | 	jle Next6
0x167: c0f00100000000000000 | 	iaddq $1, %rax
0x171:                      | Next6:
0x171: 62ee                 | 	andq %r14, %r14
0x173: 718601000000000000   | 	jle Next7
0x17c: c0f00100000000000000 | 	iaddq $1, %rax
0x186:                      | Next7:
0x186: 6255                 | 	andq %rbp, %rbp
0x188: 719b01000000000000   | 	jle Npos
0x191: c0f00100000000000000 | 	iaddq $1, %rax
0x19b:                      | Npos:	
0x19b: c0f3f8ffffffffffffff | 	iaddq $-8, %rbx		# len--
0x1a5: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x1af: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1b9: 6233                 | 	andq %rbx, %rbx		# len <= 0?
0x1bb: 765300000000000000   | 	jg Loop 		# if so, goto Done:
                            | 
0x1c4:                      | mod:
0x1c4: 6211                 | 	andq %rcx, %rcx
0x1c6: 736a03000000000000   | 	je Done
0x1cf: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1d9: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x1e3: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1ed: 735503000000000000   | 	je end
0x1f6: 62aa                 | 	andq %r10, %r10
0x1f8: 710b02000000000000   | 	jle next1
0x201: c0f00100000000000000 | 	iaddq $1, %rax	
0x20b:                      | next1:
0x20b: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x215: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x21f: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x229: 735503000000000000   | 	je end
0x232: 62aa                 | 	andq %r10, %r10
0x234: 714702000000000000   | 	jle next2
0x23d: c0f00100000000000000 | 	iaddq $1, %rax	
0x247:                      | next2:
0x247: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x251: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x25b: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x265: 735503000000000000   | 	je end
0x26e: 62aa                 | 	andq %r10, %r10
0x270: 718302000000000000   | 	jle next3
0x279: c0f00100000000000000 | 	iaddq $1, %rax	
0x283:                      | next3:
0x283: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x28d: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x297: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2a1: 735503000000000000   | 	je end
0x2aa: 62aa                 | 	andq %r10, %r10
0x2ac: 71bf02000000000000   | 	jle next4
0x2b5: c0f00100000000000000 | 	iaddq $1, %rax	
0x2bf:                      | next4:
0x2bf: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2c9: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x2d3: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x2dd: 735503000000000000   | 	je end
0x2e6: 62aa                 | 	andq %r10, %r10
0x2e8: 71fb02000000000000   | 	jle next5
0x2f1: c0f00100000000000000 | 	iaddq $1, %rax	
0x2fb:                      | next5:
0x2fb: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x305: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x30f: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x319: 735503000000000000   | 	je end
0x322: 62aa                 | 	andq %r10, %r10
0x324: 713703000000000000   | 	jle next6
0x32d: c0f00100000000000000 | 	iaddq $1, %rax	
0x337:                      | next6:
0x337: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x341: c0f1ffffffffffffffff | 	iaddq $-1, %rcx	
0x34b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x355:                      | end:
0x355: 62aa                 | 	andq %r10, %r10
0x357: 716a03000000000000   | 	jle Done
0x360: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x36a:                      | Done:
0x36a: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x36b:                      | End:
                            | #/* $end ncopy-ys */
0x36b:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x370:                      | 	.align 8
0x370:                      | src:
0x370: ffffffffffffffff     | 	.quad -1
0x378: 0200000000000000     | 	.quad 2
0x380: 0300000000000000     | 	.quad 3
0x388: fcffffffffffffff     | 	.quad -4
0x390: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8:                      | Postdest:
0x3c8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3d0:                      | .align 8
                            | # Run time stack
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
                            | 
0x450:                      | Stack:
