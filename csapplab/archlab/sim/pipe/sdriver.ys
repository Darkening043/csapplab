#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	irmovq $7, %rcx
	irmovq $0xfffffffffffffff8, %rbx
	andq %rdx, %rcx
	andq %rdx, %rbx
	jle mod
Loop:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rbp
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rbp, 56(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Next1		# if so, goto Npos:
	iaddq $1, %rax
Next1:
	andq %r9, %r9
	jle Next2
	iaddq $1, %rax
Next2:
	andq %r10, %r10
	jle Next3
	iaddq $1, %rax
Next3:
	andq %r11, %r11
	jle Next4
	iaddq $1, %rax
Next4:
	andq %r12, %r12
	jle Next5
	iaddq $1, %rax
Next5:
	andq %r13, %r13
	jle Next6
	iaddq $1, %rax
Next6:
	andq %r14, %r14
	jle Next7
	iaddq $1, %rax
Next7:
	andq %rbp, %rbp
	jle Npos
	iaddq $1, %rax
Npos:	
	iaddq $-8, %rbx		# len--
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
	andq %rbx, %rbx		# len <= 0?
	jg Loop 		# if so, goto Done:

mod:
	andq %rcx, %rcx
	je Done
	mrmovq (%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, (%rsi)
	je end
	andq %r10, %r10
	jle next1
	iaddq $1, %rax	
next1:
	mrmovq 8(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 8(%rsi)
	je end
	andq %r10, %r10
	jle next2
	iaddq $1, %rax	
next2:
	mrmovq 16(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 16(%rsi)
	je end
	andq %r10, %r10
	jle next3
	iaddq $1, %rax	
next3:
	mrmovq 24(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 24(%rsi)
	je end
	andq %r10, %r10
	jle next4
	iaddq $1, %rax	
next4:
	mrmovq 32(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 32(%rsi)
	je end
	andq %r10, %r10
	jle next5
	iaddq $1, %rax	
next5:
	mrmovq 40(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 40(%rsi)
	je end
	andq %r10, %r10
	jle next6
	iaddq $1, %rax	
next6:
	mrmovq 48(%rdi), %r10
	iaddq $-1, %rcx	
	rmmovq %r10, 48(%rsi)
end:
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
